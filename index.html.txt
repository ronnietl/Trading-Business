<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Trading Journal</title>
  <link rel="manifest" href="manifest.json">
  <meta name="theme-color" content="#2a6496">
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 15px;
      background: #f6f6f6;
    }
    h1 {
      text-align: center;
      color: #2a6496;
      margin-bottom: 10px;
    }
    form, .day-block {
      background: #fff;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      margin-bottom: 20px;
    }
    label {
      display: block;
      margin: 6px 0 2px;
      font-weight: bold;
    }
    input, select {
      width: 100%;
      padding: 6px;
      margin-bottom: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    button {
      padding: 10px 15px;
      margin: 5px 0;
      background: #2a6496;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    button:hover {
      background: #1d4666;
    }
    .reset-btn {
      background: #b94a48;
    }
    .reset-btn:hover {
      background: #7a2f2e;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      background: #fff;
      margin-top: 10px;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 6px;
      text-align: center;
    }
    th {
      background: #f0f0f0;
    }
    .summary {
      margin-top: 10px;
      padding: 10px;
      background: #fafafa;
      border-radius: 6px;
      border: 1px solid #ddd;
    }
    .trade-block {
      border-left: 3px solid #2a6496;
      padding: 10px;
      margin: 10px 0;
      background: #f9f9f9;
      border-radius: 4px;
    }
  </style>
</head>
<body>
  <h1>Trading Journal</h1>

  <form id="dayForm">
    <label>Date</label>
    <input type="date" id="date" required>

    <div id="tradesContainer"></div>

    <button type="button" onclick="addTradeBlock()">+ Add Trade</button>
    <button type="button" onclick="saveDay()">Save Day</button>
    <button type="button" class="reset-btn" onclick="clearJournal()">Clear All</button>
    <button type="button" onclick="exportCSV()">Export CSV</button>
    <input type="file" id="importFile" accept=".csv" onchange="importCSV(event)">
  </form>

  <div id="dayRecords"></div>

  <script>
    const tradesContainer = document.getElementById("tradesContainer");
    const dayRecords = document.getElementById("dayRecords");
    const storageKey = "tradingJournalByDay";
    let journal = JSON.parse(localStorage.getItem(storageKey)) || {};

    function tradeBlockHTML(index) {
      return `
        <div class="trade-block">
          <label>Trade #${index+1}</label>
          <label>Code</label>
          <input type="text" name="code${index}" required>
          <label>Side</label>
          <select name="side${index}">
            <option value="Buy">Buy</option>
            <option value="Sell">Sell</option>
          </select>
          <label>Entry Price</label>
          <input type="number" step="0.01" name="entry${index}" required>
          <label>Stop Loss</label>
          <input type="number" step="0.01" name="stop${index}" required>
          <label>Exit Price</label>
          <input type="number" step="0.01" name="exit${index}" required>
          <label>Quantity</label>
          <input type="number" name="qty${index}" required>
          <label>Remarks</label>
          <select name="remarks${index}">
            <option value="">--</option>
            <option value="Playbook">Playbook</option>
            <option value="Emotional">Emotional</option>
          </select>
        </div>
      `;
    }

    function addTradeBlock() {
      const index = tradesContainer.children.length;
      tradesContainer.insertAdjacentHTML("beforeend", tradeBlockHTML(index));
    }

    function calculatePL(entry, stop, exit, qty, side) {
      const risk = Math.abs(entry - stop) * qty;
      let profit = 0;
      if (side === "Buy") {
        profit = (exit - entry) * qty;
      } else {
        profit = (entry - exit) * qty;
      }
      const rr = risk > 0 ? (profit / risk).toFixed(2) : "0";
      return { profit, rr };
    }

    function saveDay() {
      const date = document.getElementById("date").value;
      if (!date) {
        alert("Please select a date.");
        return;
      }

      const tradeBlocks = tradesContainer.querySelectorAll(".trade-block");
      if (tradeBlocks.length === 0) {
        alert("Please add at least one trade.");
        return;
      }

      const trades = [];
      tradeBlocks.forEach((block, i) => {
        const code = block.querySelector(`[name=code${i}]`).value;
        const side = block.querySelector(`[name=side${i}]`).value;
        const entry = parseFloat(block.querySelector(`[name=entry${i}]`).value);
        const stop = parseFloat(block.querySelector(`[name=stop${i}]`).value);
        const exit = parseFloat(block.querySelector(`[name=exit${i}]`).value);
        const qty = parseInt(block.querySelector(`[name=qty${i}]`).value);
        const remarks = block.querySelector(`[name=remarks${i}]`).value;

        if (!code || isNaN(entry) || isNaN(stop) || isNaN(exit) || isNaN(qty)) return;

        const { profit, rr } = calculatePL(entry, stop, exit, qty, side);
        trades.push({ code, side, entry, stop, exit, qty, profit, rr, remarks });
      });

      if (trades.length === 0) {
        alert("Please fill in valid trade data.");
        return;
      }

      journal[date] = trades;
      localStorage.setItem(storageKey, JSON.stringify(journal));
      renderDays();
      document.getElementById("dayForm").reset();
      tradesContainer.innerHTML = "";
      addTradeBlock();
    }

    function renderDays() {
      dayRecords.innerHTML = "";
      for (const date in journal) {
        const trades = journal[date];
        let totalPL = 0, totalRR = 0, countRR = 0;
        let rows = "";

        trades.forEach((t, i) => {
          totalPL += t.profit;
          if (!isNaN(t.rr)) {
            totalRR += parseFloat(t.rr);
            countRR++;
          }
          rows += `
            <tr>
              <td>${i+1}</td>
              <td>${t.code}</td>
              <td>${t.side}</td>
              <td>${t.entry}</td>
              <td>${t.stop}</td>
              <td>${t.exit}</td>
              <td>${t.qty}</td>
              <td>${t.profit.toFixed(2)}</td>
              <td>${t.rr}</td>
              <td>${t.remarks}</td>
            </tr>
          `;
        });

        const avgRR = countRR > 0 ? (totalRR / countRR).toFixed(2) : "0";

        dayRecords.innerHTML += `
          <div class="day-block">
            <h2>Trading as a Business</h2>
            <p><strong>Date:</strong> ${date}</p>
            <table>
              <thead>
                <tr>
                  <th>#</th>
                  <th>Code</th>
                  <th>Side</th>
                  <th>Entry</th>
                  <th>Stop</th>
                  <th>Exit</th>
                  <th>Qty</th>
                  <th>P/L</th>
                  <th>R:R</th>
                  <th>Remarks</th>
                </tr>
              </thead>
              <tbody>${rows}</tbody>
            </table>
            <div class="summary">
              <p><strong>Total P/L:</strong> ${totalPL.toFixed(2)}</p>
              <p><strong>Average R:R:</strong> ${avgRR}</p>
            </div>
          </div>
        `;
      }
    }

    function clearJournal() {
      if (confirm("Clear all records?")) {
        journal = {};
        localStorage.removeItem(storageKey);
        dayRecords.innerHTML = "";
      }
    }

    function exportCSV() {
      let csv = "Date,Trade #,Code,Side,Entry,Stop,Exit,Qty,P/L,R:R,Remarks\n";
      for (const date in journal) {
        journal[date].forEach((t, i) => {
          csv += `${date},${i+1},${t.code},${t.side},${t.entry},${t.stop},${t.exit},${t.qty},${t.profit.toFixed(2)},${t.rr},${t.remarks}\n`;
        });
      }
      const blob = new Blob([csv], { type: "text/csv" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "trading_journal.csv";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
    }

    function importCSV(event) {
      const file = event.target.files[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = function(e) {
        const text = e.target.result;
        const lines = text.split("\n").slice(1); // 去掉標題列
        lines.forEach(line => {
          if (!line.trim()) return;
          const [date, tradeNum, code, side, entry, stop, exit, qty, profit, rr, remarks] = line.split(",");
          if (!journal[date]) journal[date] = [];
          journal[date].push({
            code, side,
            entry: parseFloat(entry),
            stop: parseFloat(stop),
            exit: parseFloat(exit),
            qty: parseInt(qty),
            profit: parseFloat(profit),
            rr,
            remarks
          });
        });
        localStorage.setItem(storageKey, JSON.stringify(journal));
        renderDays();
        alert("CSV imported successfully!");
      };
      reader.readAsText(file);
    }

    // 初始化
    addTradeBlock();
    renderDays();

    // PWA service worker
    if ("serviceWorker" in navigator) {
      navigator.serviceWorker.register("service-worker.js");
    }
  </script>
</body>
</html>